#lang rhombus
import:
  esterel/full open

/*

This is a wild program that has an explanation in Berry's
_The Constructive Semantics of Pure Draft Version 3_;
see p18.rkt for a quote about the program.

*/

def_signal [s1_and_s2, s1_and_not_s2, not_s1_and_s2, not_s1_and_not_s2]

def r:
  esterel:
    loop:
      with_trap t1:
        with_signal [s1]:
          par
          | pause
            emit(s1)
            exit_trap(t1)
          | loop:
              with_trap t2:
                with_signal [s2]:
                  par
                  | pause
                    emit(s2)
                    exit_trap(t2)
                  | loop:
                      cond
                      | ¿(s1):
                          cond
                          | ¿(s2):
                              emit(s1_and_s2)
                          | ~else:
                              emit(s1_and_not_s2)
                      | ~else:
                          cond
                          | ¿(s2):
                              emit(not_s1_and_s2)
                          | ~else:
                              emit(not_s1_and_not_s2)
                      pause

fun drop_s1_s2(ht :: Map):
  for values(ht = Map()):
    each (k,v): ht
    keep_when signal_name(k) != "s1" && signal_name(k) != "s2"
    ht ++ {k : v}

block:
  react(r)
  #void

for:
  each i:0..200
  def sigs = react(r)
  unless drop_s1_s2(sigs) == {not_s1_and_not_s2 : #true,
                              s1_and_s2 : #true,
                              s1_and_not_s2 : #true}
  | error("p18: wrong result" +& sigs)
