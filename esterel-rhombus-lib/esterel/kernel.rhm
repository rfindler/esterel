#lang rhombus/static/and_meta
import:
  lib("esterel/kernel.rkt"):
    expose #{present?}
  lib("esterel/private/kernel.rkt") as pkernel:
    expose #{mk-signal/args}
    expose #{esterel/proc}
    expose #{par/proc}
    expose #{with-trap/proc}
    expose #{run-and-kill-signals!}
    expose #{no-init}
  lib("syntax/location.rkt"):
    expose #{quote-srcloc}
  lib("racket/set.rkt"):
    expose set

export:
  def_signal
  esterel
  ¿
  |||
  par
  emit
  react
  with_trap
  exit_trap
  with_signals
  pause
  signal_name

defn.macro 'def_signal: $id ...':
  def [srclocs, ...] = [expr_meta.pack_s_exp(['#{quote-srcloc}',id]), ...]
  'def $id : #{mk-signal/args}(#'$id, #{no-init}, #false, $srclocs, #false)
   ...'

expr.macro 'esterel:
              $body':
  '#{esterel/proc}(0, fun (): $body)'

operator ¿ x:
  ~stronger_than |||
  #{present?}(x)

expr.macro '$left ||| $right':
   '#{par/proc}(PairList(fun (): $left, fun(): $right))'

fun
| emit(s): kernel.emit(s)
| emit(s,v): kernel.emit(s,v)

fun react(r, ~emit: signals = []):
  // the for loop here converts an equal
  // hash into an equal-always hash in
  // order to cooperate better with Rhombus
  def rkt_signals = PairList(&signals)
  for Map:
    each (k,v): kernel.#{react!}(r, ~emit: rkt_signals) :~ Map
    values(k,v)

expr.macro 'with_trap $t:
              $body':
  '#{with-trap/proc}(#'$t,fun ($t):
                            $body)'

expr.macro 'with_signals {$id, ...}:
              $body':
  def [srclocs, ...] = [expr_meta.pack_s_exp(['#{quote-srcloc}',id]), ...]
  'block:
     def $id: #{mk-signal/args}(#'$id, #{no-init}, #false, $srclocs, #false)
     ...
     #{run-and-kill-signals!}(set($id,...),fun (): $body)'

expr.macro 'par
            | $body
            | ...':
  '#{par/proc}(PairList(fun (): $body, ...))'

expr.macro 'pause':
  'kernel.pause()'

fun exit_trap(t):
  kernel.#{exit-trap}(t)

fun signal_name(s):
  kernel.#{signal-name}(s)
